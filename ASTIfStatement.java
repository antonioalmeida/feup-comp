import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import semantic.Symbol;
import semantic.SymbolTable;

/* Generated By:JJTree: Do not edit this line. ASTIfStatement.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTIfStatement extends SimpleNode {
  public ASTIfStatement(int id) {
    super(id);
  }

  public ASTIfStatement(Yal p, int id) {
    super(p, id);
  }

  public boolean analyseSymbolTable() {
	  if(children != null && children.length == 2) {
		  ASTIf ifChild = (ASTIf) children[0];
		  ASTElse elseChild = (ASTElse) children[1];
		  
		  HashMap<String, Symbol> ifSymbols = ifChild.getSymbolTable().getSymbols();
		  Iterator<Entry<String, Symbol>> symbolsIt = ifSymbols.entrySet().iterator();
		  
		  HashMap<String, Symbol> elseSymbols = elseChild.getSymbolTable().getSymbols();
		  
	        while(symbolsIt.hasNext()) {
	            Map.Entry<String, Symbol> pair = (Entry<String, Symbol>) symbolsIt.next();

	            String symbolName = pair.getKey();
	            Symbol ifSymbol = pair.getValue();
	            boolean ifInitialized = ifSymbol.getInitialized();
	            
	            if(elseSymbols.containsKey(symbolName)) {
	            	Symbol elseSymbol = elseSymbols.get(symbolName);
	            	if(ifSymbol.getType().equals(elseSymbol.getType())) {
	            		boolean elseInitialized = elseSymbol.getInitialized();
	            		initializeSymbol(symbolName, ifSymbol.getType(), ifInitialized && elseInitialized);
	            		ifSymbols.remove(symbolName);
	            		elseSymbols.remove(symbolName);
	            	}
	            	
	            }
	           
	        }
		  
	  }
	  return true;
  }

}
/* JavaCC - OriginalChecksum=be924ab1c5571a0d2ac2d601584745bd (do not edit this line) */
