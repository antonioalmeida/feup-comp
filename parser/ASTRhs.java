/* Generated By:JJTree: Do not edit this line. ASTRhs.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;
import java.util.Vector;

import semantic.Symbol;
public
class ASTRhs extends SimpleNode {

    public ASTRhs(int id) {
        super(id);
    }

    public ASTRhs(Yal p, int id) {
        super(p, id);
    }

    public boolean analyseSymbolTable() {
   
        // Rhs -> Term (OP Term)? | [ArraySize]

        // Term OP Term
        if(children.length > 1) {
            Vector<Symbol.Type> lhsTypes = ((ASTTerm) children[0]).getReturnTypes();
            Vector<Symbol.Type> rhsTypes = ((ASTTerm) children[1]).getReturnTypes();

            if(! lhsTypes.contains(Symbol.Type.SCALAR)) {
               //System.out.println("Semantic error: " + ((SimpleNode) children[0]).getRealValue() + " should be of Type SCALAR in order to be used in here.");
               printSemanticError(((SimpleNode) children[0]).getRealValue() + " should be of Type SCALAR in order to be used in here");
               return false;
            }
            else if(! rhsTypes.contains(Symbol.Type.SCALAR)) {
                //System.out.println("Semantic error: " + ((SimpleNode) children[1]).getRealValue() + " should be of Type SCALAR in order to be used in here.");
                printSemanticError(((SimpleNode) children[1]).getRealValue() + " should be of Type SCALAR in order to be used in here");
            	return false;
             }
        }

        return true;
    }

    public Symbol.Type getReturnType() {
    	Symbol.Type lhsType = ((SimpleNode) children[0]).getReturnType();      
        return lhsType;
    }
    
    public Vector<Symbol.Type> getReturnTypes(){
    	
    	
    	if(children.length > 1)
    		return  ((ASTTerm) children[0]).getReturnTypes();
    	else if(children[0].toString().equals("Term"))
    		return  ((ASTTerm) children[0]).getReturnTypes();
    	else {
    		Vector<Symbol.Type> types = new Vector<Symbol.Type>();
    		types.add(getReturnType());
    		return types;
    	}
    }

    public String generateCode() {
        String generatedCode = "";

        if(children != null)
            for(Node child : children)
                generatedCode += ((SimpleNode) child).generateCode();

        // if Rhs -> Term OP Term
        if(children.length > 1) {
                switch(this.value) {
                    case "+":
                        generatedCode += "iadd";
                        break;
                    case "-":
                        generatedCode += "isub";
                        break;
                    case "*":
                        generatedCode += "imul";
                        break;
                    case "/":
                        generatedCode += "idiv";
                        break;
                        /*
                    case "<<":
                        generatedCode += "isub\n";
                        break;
                    case ">>":
                        generatedCode += "isub\n";
                        break;
                    case ">>>":
                        generatedCode += "isub\n";
                        break;
                        */
                }
                generatedCode += '\n';
        }

        return generatedCode;
    }
    
    public boolean hasOperation(){
    	return jjtGetNumChildren() == 2;
    }

}
/* JavaCC - OriginalChecksum=932ffec24e09a0464c82d9d74ba511cb (do not edit this line) */
