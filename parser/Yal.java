/* Generated By:JJTree&JavaCC: Do not edit this line. Yal.java */
package parser;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import codeGeneration.CodeGenerator;
import utils.Utils;




public class Yal/*@bgen(jjtree)*/implements YalTreeConstants, YalConstants {/*@bgen(jjtree)*/
  protected static JJTYalState jjtree = new JJTYalState();
  private static Yal myYal;
  private static boolean error = false;
  private static int optRN = -1;

  public static void main(String args []) throws ParseException, IOException
  {

    if( validArgs(args) == false)
        return;
    else {

        SimpleNode root = myYal.Program(); // devolve referência para o nó raiz da árvore

        System.out.println("\u005cnAST Tree:");
        root.dump(""); // imprime no ecrã a árvore
        if(error == false) {
                System.out.println("");
                root.analyse();
                System.out.println("\u005cnFunction Table:");
                root.printFunctionTable("");
                        System.out.println("\u005cnSymbol Table:");
                        root.printSymbolTable("");
                        if(optRN >= 0) {
                                root.dumpUsesDefs("");
                                root.handleOtimizationR(optRN);
                                root.dumpSuccessorsAntecessors();
                        }
                        CodeGenerator codeGenerator = new CodeGenerator(root);
                        codeGenerator.generateCode();
                }
    }
  }



  public static File validFilePath(String filePath) {
                File file = new File(filePath);

                if(file.exists())
                        return file;
                else
                        return null;

  }


  public static boolean validArgs(String args []) {
                if(args.length > 2) {
                        System.out.println("Error: Invalid number of arguments.");
                        System.out.println("Usage: java Yal [filePath] [-r=< n >]");
                        return false;
                }

                else if(args.length == 0)
                        myYal = new Yal(System.in);
                else {
                                File file;
                        if( (file = validFilePath(args[0])) == null) {
                                System.out.println("Error: Invalid file Path.");
                                System.out.println("Usage: java Yal [filePath] [-r=< n >]");
                                return false;
                        }
                        else {
                                FileInputStream stream;
                                                                try {
                                                                        stream = new FileInputStream(file);
                                                                        myYal = new Yal(stream);
                                                                } catch (FileNotFoundException e) {
                                                                        System.out.println("Error in stream constructor: ");
                                                                        System.out.println("Usage: java Yal [filePath] [-r=< n >]");
                                                                        e.printStackTrace();
                                                                        return false;
                                                                }

                        }
                if(args.length == 2) {

             if(args[1].substring(0, 3).equals("-r=")) {
                                if(Utils.isInteger(args[1].substring(3))) {
                                        optRN = Integer.parseInt(args[1].substring(3));
                                        if(optRN < 0) {
                                                System.out.println("Error: The number in option R must be an integer greater or equal to 0.");
                                                System.out.println("Usage: java Yal [filePath] [-r=< n >]");
                                                return false;
                                        }
                                }
                                else {
                                        System.out.println("Error: The number in option R must be an integer.");
                                        System.out.println("Usage: java Yal [filePath] [-r=< n >]");
                                        return false;
                                }
             }
             else {
                                System.out.println("Error: Non valid argument");
                                System.out.println("Usage: java Yal [filePath] [-r=< n >]");
                                return false;
             }
        }

      }


                return true;
  }


   public static void generateCode(SimpleNode root) throws IOException
  {
    FileOutputStream outputStream = new FileOutputStream("test.j");
    String codeString = root.generateCode();
    byte [] strToBytes = codeString.getBytes();
    outputStream.write(strToBytes);
    outputStream.close();
  }

  public static void errorSkipTo(ParseException e, String errorMessage,  SkipToken... skipTargets) {
    error = true;
    System.out.println("Syntatic Error on " + errorMessage + ". " + e.toString());

    skipTokens(skipTargets);

  }



  public static void errorSkipTo(ParseException e, String errorMessage, Integer leftToken, Integer rightToken, SkipToken... skipTargets) {
   error = true;
   System.out.println("Syntatic Error on " + errorMessage + ". " + e.toString());

        Integer token = skipTokens(skipTargets);

        if(token == leftToken) {
                Token t;

                do {
                        t = getNextToken();
                }while(t.kind != rightToken);

        }

  }

  public static Integer skipTokens(SkipToken... skipTargets) {

        boolean foundTarget = false;
        Token t;

        do {
      t = getToken(1);

          for(int i = 0; i < skipTargets.length && foundTarget == false; i++)
                 if(skipTargets[i].getToken() == t.kind) {
                        foundTarget = true;
                        if(skipTargets[i].isConsumed() == true)
                          getNextToken();

                 }



      if(!foundTarget)
        getNextToken();

    } while (!foundTarget);

    return t.kind;

  }

  public static void coverageBlock() throws ParseException {
        Token t1;
    t1 = getToken(1);
    if(t1.kind == LCHAVETA) {
          getNextToken();
      StmtlstError();
    }
  }

  public static void consumeToken(Integer... tokens) throws ParseException {
        Token t;
        t = getToken(1);

        if(Arrays.asList(tokens).contains(t.kind)) {
                getNextToken();
        }
  }

  static final public SimpleNode Program() throws ParseException {
 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Module();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Module() throws ParseException {
 /*@bgen(jjtree) Module */
 ASTModule jjtn000 = new ASTModule(JJTMODULE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      try {
        jj_consume_token(MODULE);
        t = jj_consume_token(ID);
                      jjtn000.jjtAddValue(t.image);
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
        error = true;
    System.out.println("Syntatic error on module declaration. " + e.toString());
    {if (true) return;}
      }
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          Declaration();
        }
      } catch (ParseException e) {
                errorSkipTo(e, "declarations module area", new SkipToken(PVIRG, true), new SkipToken(FUNCTION, false));
      }
      try {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FUNCTION:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_2;
          }
          Function();
        }
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    errorSkipTo(e, "functions module area", new SkipToken(RCHAVETA, true));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Declaration() throws ParseException {
 /*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        Element();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            ArrayAssigned();
            break;
          case ADDSUB_OP:
          case INTEGER:
            ScalarAssigned();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
                errorSkipTo(e, "declaration", new SkipToken(PVIRG, true), new SkipToken(FUNCTION, false));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArrayAssigned() throws ParseException {
                        /*@bgen(jjtree) ArrayAssigned */
  ASTArrayAssigned jjtn000 = new ASTArrayAssigned(JJTARRAYASSIGNED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(31);
      ArraySize();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ScalarAssigned() throws ParseException {
                         /*@bgen(jjtree) ScalarAssigned */
                         ASTScalarAssigned jjtn000 = new ASTScalarAssigned(JJTSCALARASSIGNED);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));Token t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t1 = jj_consume_token(ADDSUB_OP);
                               jjtn000.jjtAddValue(t1.image);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      t2 = jj_consume_token(INTEGER);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.jjtSetLastToken(getToken(0));
                           jjtn000.jjtAddValue(t2.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Function() throws ParseException {
                   /*@bgen(jjtree) Function */
                    ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
    try {
      try {
        jj_consume_token(FUNCTION);
        t = jj_consume_token(ID);
                          jjtn000.jjtAddValue(t.image);
      } catch (ParseException e) {
                        errorSkipTo(e, "function name", new SkipToken(LPAR, false));
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case 31:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 31:
            ArrayElementNoID(t.image);
            break;
          default:
            jj_la1[5] = jj_gen;
            ScalarElementNoID(t.image);
          }
          FunctionAssign();
                          jjtn000.jjtSetValue("");
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Varlist();
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
          break;
        case LPAR:
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            Varlist();
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
    errorSkipTo(e, "function declaration", new SkipToken(RPAR, true));
      }
      try {
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
                errorSkipTo(e, "function body",  new SkipToken(RCHAVETA, true));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void FunctionAssign() throws ParseException {
                         /*@bgen(jjtree) FunctionAssign */
                         ASTFunctionAssign jjtn000 = new ASTFunctionAssign(JJTFUNCTIONASSIGN);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
                         jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(ASSIGN);
      t = jj_consume_token(ID);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
          jjtn000.jjtAddValue(t.image);
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
    }
  }

  static final public void Varlist() throws ParseException {
                  /*@bgen(jjtree) Varlist */
                   ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
                   jjtn000.jjtSetFirstToken(getToken(1));Token t1, t2;
    try {
      t1 = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ArrayElementNoID(t1.image);
        break;
      default:
        jj_la1[9] = jj_gen;
        ScalarElementNoID(t1.image);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRG:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_3;
        }
        jj_consume_token(VIRG);
        t2 = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ArrayElementNoID(t2.image);
          break;
        default:
          jj_la1[11] = jj_gen;
          ScalarElementNoID(t2.image);
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Element() throws ParseException {
                       Token t;
    t = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayElementNoID(t.image);
      break;
    default:
      jj_la1[12] = jj_gen;
      ScalarElementNoID(t.image);
    }
  }

  static final public void ArrayElementNoID(String id) throws ParseException {
 /*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
         jjtn000.jjtAddValue(id);
      jj_consume_token(31);
      jj_consume_token(32);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ScalarElementNoID(String id) throws ParseException {
 /*@bgen(jjtree) ScalarElement */
  ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
         jjtn000.jjtAddValue(id);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ArrayElement() throws ParseException {
 /*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
      jj_consume_token(31);
      jj_consume_token(32);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ScalarElement() throws ParseException {
 /*@bgen(jjtree) ScalarElement */
  ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Stmtlst() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      Stmt();
    }
  }

  static final public void StmtlstError() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case IF:
      case ID:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      Stmt();
    }
    jj_consume_token(RCHAVETA);
  }

  static final public void Stmt() throws ParseException {
                     Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        While();
        break;
      case IF:
        IfStatement();
        break;
      case ID:
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case 31:
          AssignNoPoint(t.image, false);
          break;
        case LPAR:
          CallVirg(t.image);
          break;
        case 33:
          jj_consume_token(33);
          NoPointAssignCallVirg(t.image);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        System.out.println("Syntatic error during Statement declaration. " + e.toString());
      Token t2;

      do {
        t2 = getNextToken();

        /*
        if(t2.kind == LCHAVETA) {
          StmtlstError();
          return;
        }*/
      } while(t2.kind != PVIRG);
    }
  }

  static final public void NoPointAssignCallVirg(String id) throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      CallVirg(id+"."+t.image);
      break;
    case SIZE:
      jj_consume_token(SIZE);
      AssignNoPoint(id, true);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Assign() throws ParseException {
 /*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Lhs();
      jj_consume_token(ASSIGN);
      Rhs();
      jj_consume_token(PVIRG);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void AssignNoID(String id) throws ParseException {
 /*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        LhsNoID(id);
        jj_consume_token(ASSIGN);
        Rhs();
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
    errorSkipTo(e, "assignment", new SkipToken( PVIRG, true));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void AssignNoPoint(String id, boolean size_array) throws ParseException {
 /*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        LhsNoPoint(id, size_array);
        jj_consume_token(ASSIGN);
        Rhs();
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
    errorSkipTo(e, "assignment",  new SkipToken(PVIRG, true));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Lhs() throws ParseException {
 Token t;
    t = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayAccessNoID(t.image);
      break;
    default:
      jj_la1[18] = jj_gen;
      ScalarAccessNoID(t.image);
    }
  }

  static final public void LhsNoID(String id) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayAccessNoID(id);
      break;
    default:
      jj_la1[19] = jj_gen;
      ScalarAccessNoID(id);
    }
  }

  static final public void LhsNoPoint(String id, boolean size_array) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      ArrayAccessNoID(id);
      break;
    default:
      jj_la1[20] = jj_gen;
      ScalarAccessNothing(id, size_array);
    }
  }

  static final public void Rhs() throws ParseException {
 /*@bgen(jjtree) Rhs */
 ASTRhs jjtn000 = new ASTRhs(JJTRHS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
      case INTEGER:
      case ID:

        Term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADDSUB_OP:
        case ARITH_OP:
        case BITWISE_OP:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ARITH_OP:
            t = jj_consume_token(ARITH_OP);
            break;
          case BITWISE_OP:
            t = jj_consume_token(BITWISE_OP);
            break;
          case ADDSUB_OP:
            t = jj_consume_token(ADDSUB_OP);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
       jjtn000.jjtAddValue(t.image);
          Term();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        break;
      case 31:
        ArrayAssigned();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArraySize() throws ParseException {
 /*@bgen(jjtree) ArraySize */
 ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ScalarAccess();
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.jjtAddValue(t.image);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Term() throws ParseException {
 /*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t,t2=null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDSUB_OP:
        t2 = jj_consume_token(ADDSUB_OP);
                    jjtn000.jjtAddValue(t2.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
        t = jj_consume_token(INTEGER);
                   ASTInteger jjtn001 = new ASTInteger(JJTINTEGER);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
                   jjtn001.jjtSetLastToken(getToken(0));
                  jjtn001.jjtAddValue(t.image);
        } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
        }
        break;
      case ID:
        t = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          Call(t.image);
          break;
        case 33:
          jj_consume_token(33);
          PointCallScalarAccess(t.image);
          break;
        case 31:
          ArrayAccessNoID(t.image);
          break;
        default:
          jj_la1[26] = jj_gen;
          ScalarAccessNothing(t.image, false);
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Exprtest() throws ParseException {
 /*@bgen(jjtree) Exprtest */
 ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(LPAR);
      Lhs();
      t = jj_consume_token(RELA_OP);
      Rhs();
      jj_consume_token(RPAR);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   jjtn000.jjtAddValue(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void While() throws ParseException {
 /*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        jj_consume_token(WHILE);
        Exprtest();
        jj_consume_token(LCHAVETA);
      } catch (ParseException e) {
      errorSkipTo(e, "WHILE statement declaration",  new SkipToken(LCHAVETA, true));
      }
      Stmtlst();
      jj_consume_token(RCHAVETA);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  static final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      If();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        Else();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void If() throws ParseException {
 /*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        jj_consume_token(IF);
        Exprtest();
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    errorSkipTo(e, "IF statement",  new SkipToken(RCHAVETA, true));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Else() throws ParseException {
 /*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        jj_consume_token(ELSE);
        jj_consume_token(LCHAVETA);
        Stmtlst();
        jj_consume_token(RCHAVETA);
      } catch (ParseException e) {
    /*System.out.println("Syntatic error on ELSE statement. " + e.toString());
    Token t1;
    boolean hasBrackets = false;
    // If left brackets is found, skip to right bracket
    // otherwise, skip to ';'

    // TODO: Refactor this later
    do {
      t1 = getNextToken();
      if(t1.kind == LCHAVETA) {
        hasBrackets = true;
        break;
      }
    } while (t1.kind != PVIRG);

    if(hasBrackets) {
      do {
        t1 = getNextToken();
      } while (t1.kind != RCHAVETA);
    }*/
        errorSkipTo(e, "ELSE statement", LCHAVETA, RCHAVETA, new SkipToken(PVIRG, true));
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void Call(String id) throws ParseException {
 /*@bgen(jjtree) Call */
 ASTCall jjtn000 = new ASTCall(JJTCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
    try {
      try {
        jj_consume_token(LPAR);
      } catch (ParseException e) {
                errorSkipTo(e, ": function call must have parentheses", new SkipToken(RPAR, false), new SkipToken(PVIRG, true));
                {if (true) return;}
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
          ArgumentList();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
      } catch (ParseException e) {
        errorSkipTo(e, "function call", new SkipToken(RPAR, true));
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   jjtn000.jjtAddValue(id);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void CallVirg(String id) throws ParseException {
 /*@bgen(jjtree) Call */
 ASTCall jjtn000 = new ASTCall(JJTCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
    try {
      try {
        jj_consume_token(LPAR);
      } catch (ParseException e) {
                errorSkipTo(e, ": function call must have parentheses", new SkipToken(RPAR, false), new SkipToken(PVIRG, true));
                {if (true) return;}
      }
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
        case ID:
        case STRING:
          ArgumentList();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        jj_consume_token(RPAR);
        jj_consume_token(PVIRG);
      } catch (ParseException e) {
        errorSkipTo(e, "function call", new SkipToken(RPAR, true));
        coverageBlock();
        consumeToken(PVIRG);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   jjtn000.jjtAddValue(id);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArgumentList() throws ParseException {
    Argument();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRG);
      Argument();
    }
  }

  static final public void Argument() throws ParseException {
 /*@bgen(jjtree) Argument */
 ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      ASTId jjtn001 = new ASTId(JJTID);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          t = jj_consume_token(ID);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
        break;
      case STRING:
      ASTString jjtn002 = new ASTString(JJTSTRING);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
        try {
          t = jj_consume_token(STRING);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtn002.jjtSetLastToken(getToken(0));
      }
        }
        break;
      case INTEGER:
      ASTInteger jjtn003 = new ASTInteger(JJTINTEGER);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
      jjtn003.jjtSetFirstToken(getToken(1));
        try {
          t = jj_consume_token(INTEGER);
        } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
        jjtn003.jjtSetLastToken(getToken(0));
      }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   jjtn000.jjtAddValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArrayAccess() throws ParseException {
 /*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
      jj_consume_token(31);
      Index();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ArrayAccessNoID(String id) throws ParseException {
 /*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
   jjtn000.jjtAddValue(id);
      jj_consume_token(31);
      Index();
      jj_consume_token(32);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ScalarAccess() throws ParseException {
 Token t;
    t = jj_consume_token(ID);
    ScalarAccessNoID(t.image);
  }

  static final public void ScalarAccessNoID(String id) throws ParseException {
 /*@bgen(jjtree) ScalarAccess */
  ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
    try {
   jjtn000.jjtAddValue(id);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        jj_consume_token(SIZE);
                jjtn000.set_size_access(true);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void ScalarAccessNothing(String id, boolean size_array) throws ParseException {
 /*@bgen(jjtree) ScalarAccess */
  ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t=null;
    try {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
   jjtn000.jjtAddValue(id); jjtn000.set_size_access(size_array);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  static final public void PointCallScalarAccess(String id) throws ParseException {
 Token t=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      t = jj_consume_token(ID);
      Call(id + "." + t.image);
      break;
    case SIZE:
      jj_consume_token(SIZE);
      ScalarAccessNothing(id, true);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Index() throws ParseException {
 /*@bgen(jjtree) Index */
 ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
 jjtn000.jjtAddValue(t.image);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public YalTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x800000,0x84000100,0x8000,0x100,0x80000000,0x8000000,0x8000000,0x80028000,0x80000000,0x80000,0x80000000,0x80000000,0x8003000,0x8003000,0x80028000,0x8003000,0xa000000,0x80000000,0x80000000,0x80000000,0x700,0x700,0x8c000100,0xc000000,0x100,0x80020000,0xc000000,0x4000,0x4c000000,0x4c000000,0x80000,0x4c000000,0x0,0xa000000,0xc000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Yal(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Yal(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new YalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Yal(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new YalTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Yal(YalTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(YalTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[34];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 34; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
