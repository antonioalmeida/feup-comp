import java.util.Vector;

import semantic.Symbol;

/* Generated By:JJTree: Do not edit this line. ASTAssign.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTAssign extends SimpleNode {
    public ASTAssign(int id) {
        super(id);
    }

    public ASTAssign(Yal p, int id) {
        super(p, id);
    }

    public boolean analyseSymbolTable() {
        if(children == null)
            return false;

        // lhs
        SimpleNode lhsChild = (SimpleNode) children[0];
        
        if(lhsChild.getSizeArray()) {
        	//System.out.println("Semantic Error: Can't assign the size of array "+lhsChild.value+".");
        	printSemanticError("Can't assign the size of array "+lhsChild.value);
        	return false;
        }
        Symbol.Type lhsType = lhsChild.getReturnType();
        

        // rhs
        SimpleNode rhsChild = (SimpleNode) children[1];
       Vector<Symbol.Type> rhsTypes = ((ASTRhs) rhsChild).getReturnTypes();

        String lhsSymbol = (String) lhsChild.jjtGetValue();
        String rhsSymbol = (String) rhsChild.jjtGetValue();
        
        if(!rhsTypes.contains(Symbol.Type.SCALAR) && !rhsTypes.contains(Symbol.Type.ARRAY)) {
        	//System.out.println("Semantic Error: On expression assignement of "+lhsSymbol+".");
        	printSemanticError("On expression assignement of "+lhsSymbol);
        	return false;
        }
        else if(!rhsTypes.contains(Symbol.Type.SCALAR) && rhsTypes.contains(Symbol.Type.ARRAY)) {
        	if(!initializeSymbol(lhsSymbol, Symbol.Type.ARRAY, true)) {
        		//System.out.println("Semantic Error: " + lhsSymbol + " has been declared as a scalar, reassigned as an array.");
        		printSemanticError(lhsSymbol + " has been declared as a scalar, reassigned as an array");
        		return false;
        	}

            return true;
        }
        else if(lhsChild.toString().equals("ArrayAccess"))
        	return true;
        else {
        	Symbol.Type type = Symbol.Type.SCALAR;
        	if(lhsType.equals(Symbol.Type.ARRAY))
        	   type = Symbol.Type.ARRAY;
            
        
        	if(type.equals(Symbol.Type.ARRAY) && !verifySymbolTypes(lhsSymbol, true, Symbol.Type.ARRAY)) {
        		 //System.out.println("Semantic Error: Can't initialize array " + lhsSymbol+" as its size should have been declared before.");
                 printSemanticError("Can't initialize array " + lhsSymbol+" as its size should have been declared before");
        		 return false;
        	}
        	else
        		initializeSymbol(lhsSymbol, type, true);
        }

        return true;
    }

    public Symbol.Type getReturnType() {
        return Symbol.Type.VOID;  
    }
    
    public boolean isArrayAssigned() {
    	SimpleNode rhs = (SimpleNode) this.jjtGetChild(1);

    	SimpleNode arrayAssigned = (SimpleNode) rhs.jjtGetChild(0);
    	
        if (arrayAssigned.id==YalTreeConstants.JJTARRAYASSIGNED)
        	return true;
        return false;
    }
    
    public boolean isArrayAcess() {
    	SimpleNode lhs = (SimpleNode) this.jjtGetChild(0);

    	
        if (lhs.id==YalTreeConstants.JJTARRAYACCESS)
        	return true;
        return false;
    }

}
/* JavaCC - OriginalChecksum=8a81cbd863c4645c551a38479e4343a7 (do not edit this line) */
