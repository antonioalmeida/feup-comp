/* Generated By:JJTree: Do not edit this line. ASTTerm.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTTerm extends SimpleNode {
    protected String sign = null;


    public ASTTerm(int id) {
        super(id);
    }

    public ASTTerm(Yal p, int id) {
        super(p, id);
    }

    public Symbol.Type getReturnType() {
        // Term -> <INTEGER> | Call | ArrayAccess | ScalarAccess

        // children is null when Term -> ScalarAccess
        if(children == null) 
            return Symbol.Type.SCALAR;

        return ((SimpleNode) children[0]).getReturnType();
    }
    
    public boolean analyseSymbolTable() {
    	
    	if(children != null && children.length > 0) {
    		SimpleNode child = (SimpleNode) children[0];
    		if(child.toString().equals("ScalarAccess")) {
    			if(! verifySymbolTypes(child.value, true, Symbol.Type.SCALAR, Symbol.Type.ARRAY)) {
    				System.out.println("Semantic Error: "+child.value +" should have been initialized");
    				return false;
    			}
    		}
    		
    		else if(child.toString().equals("Call")) {
    			//TODO Check that call returns a scalar
    		}
    	}
    		
    	return true;
    }

}
/* JavaCC - OriginalChecksum=694cdb272d61fc5ab19824a2f80bedc9 (do not edit this line) */
