Module ::= <MODULE> <ID> <LCHAVETA> ( Declaration )* ( Function )* <RCHAVETA>

Declaration ::= ( ArrayElement | ScalarElement ) ( <ASSIGN> ( ( "[" ArraySize "]") | ( <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>

Function ::= ( ( <FUNCTION> ( ArrayElement | ScalarElement ) <ASSIGN> <ID>
<LPAR> ( Varlist )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist
)? <RPAR> ) ) <LCHAVETA> Stmtlst <RCHAVETA>

Varlist ::= ( ArrayElement | ScalarElement ) ( <VIRG> ( ArrayElement | ScalarElement ) )*

ArrayElement ::= <ID> "[" "]"

ScalarElement ::= <ID>

Stmtlst ::= ( Stmt )*

Stmt ::= While
| If
| Assign
| Call <PVIRG>

Assign ::= Lhs <ASSIGN> Rhs <PVIRG>

Lhs ::= ArrayAccess | ScalarAccess

Rhs ::= ( Term ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term )? )
| "[" ArraySize "]"

ArraySize ::= ScalarAccess | <INTEGER>

Term ::= ( <ADDSUB_OP> )? ( <INTEGER> | Call | ArrayAccess | ScalarAccess )

Exprtest ::= <LPAR> Lhs <RELA_OP> Rhs <RPAR>

While ::= <WHILE> Exprtest <LCHAVETA> Stmtlst <RCHAVETA>

If ::= <IF> Exprtest <LCHAVETA> Stmtlst <RCHAVETA> ( <ELSE> <LCHAVETA> Stmtlst <RCHAVETA> )?

Call ::= <ID> ( "." <ID> )? <LPAR> ( ArgumentList )? <RPAR>

ArgumentList ::= Argument ( <VIRG> Argument )*

Argument ::= ( <ID> | <STRING> | <INTEGER> )

ArrayAccess ::= <ID> "[" Index "]"

ScalarAccess ::= <ID> ( "." <SIZE> )?

Index ::= <ID> | <INTEGER>