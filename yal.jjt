options
{
  LOOKAHEAD= 1;

}

PARSER_BEGIN(Yal)
public class Yal
{
  public static void main(String args []) throws ParseException
  {
    Yal myYal = new Yal(System.in);
    SimpleNode root = myYal.Program(); // devolve referência para o nó raiz da árvore
    root.dump(""); // imprime no ecrã a árvore
  }
}

PARSER_END(Yal)

< DEFAULT >
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* reserved words */
< DEFAULT >
TOKEN :
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
}

< DEFAULT >
TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

SimpleNode Program() :
{}
{
  < MODULE >
  {
    return jjtThis;
  }
}

void Module() : 
{Token t;}
{
  < MODULE > t=< ID >{jjtThis.setValue(t.image);} < LCHAVETA >
  (
    Declaration()
  )*
  (
    Function()
  )*
  < RCHAVETA >
}

void Declaration() :
{}
{
  (
    Element()
  )
  (
    < ASSIGN >
    (
      (
        "[" ArraySize() "]"
      )
    | (< ADDSUB_OP >)? < INTEGER >
    )
  )?
  < PVIRG >
}

void Function() : { Token t;}
{ < FUNCTION > t=< ID > 
  (
    (
      
      (
        (          ArrayElementNoID(t))?
      /*| ScalarElementNoID(t)*/
      )
      < ASSIGN > < ID > 
      < LPAR >
      (
        Varlist()
      )?
      < RPAR >
    )
  |
    (
	 < LPAR >
      (
        Varlist()
      )?
      < RPAR >
    )
  )
  < LCHAVETA > Stmtlst() < RCHAVETA >
}

void Varlist() : { Token t1, t2; }
{ t = < ID >
  (
    (      ArrayElementNoID(t1))?
  /*| ScalarElementNoID(t)*/
  )
  (
    < VIRG >  t2 = < ID >
    (
      (        ArrayElementNoID(t2))?
    /*| ScalarElementNoID(t2) We don't know if we are supposed to have scalarElement*/
    )
  )*
}

void Element() #void:{Token t;}{
	t=<ID> (
		(		  ArrayElementNoID(t.image))?
	 /* | ScalarElementNoID(t.image)*/
	)
}

void ArrayElementNoID(String id) #ArrayElement:
{}
{
	{jjtThis.setValue(id);}
  "[" "]"
}

/*
TODO: Ask teacher if it is preferable to have a warning or to delete ScalarElement
void ScalarElementNoID(String id) #ScalarElement:
{}
{
	{jjtThis.setValue(id);}
  	""
}*/

void ArrayElement() :
{}
{
  < ID > "[" "]"
}

void ScalarElement() :
{}
{
  < ID >
}

void Stmtlst() :
{}
{
  (
    Stmt()
  )*
}

void Stmt() : { Token t; }
{
  While()
| If()
(  t = < ID >
(   AssignNoID(t)
| CallNoID(t) < PVIRG >))
}

void Assign() :
{}
{
  Lhs() < ASSIGN > Rhs() < PVIRG >
}

void AssignNoID(String id) #Assign:
{ }
{
  {jjThis.setValue(id);}
  LhsNoID(id) < ASSIGN > Rhs() < PVIRG >
}

void Lhs() :
{Token t;}
{
  t = < ID >
  ArrayAccessNoID(t)
| ScalarAccessNoID(t)
}

void LhsNoID(String id) #Lhs:
{ }
{
  {jjThis.setValue(id);}
  ArrayAccessNoID()
| ScalarAccessNoID()
}
  

void Rhs() :
{}
{
  (
    Term()
    (
      (
        < ARITH_OP >
      | < BITWISE_OP >
      | < ADDSUB_OP >
      )
      Term()
    )?
  )
| "[" ArraySize() "]"
}

void ArraySize() :
{}
{
  ScalarAccess()
| < INTEGER >
}

void Term() :
{
  Token t;
}
{
  (< ADDSUB_OP >)?
  (
    < INTEGER >
  |
    (
      t = < ID >
      (
        CallNoID(t)
      | ArrayAccessNoID(t)
      | ScalarAccessNoID(t)
      )
    )
  )
}

void Exprtest() :
{}
{
  < LPAR > Lhs() < RELA_OP > Rhs() < RPAR >
}

void While() :
{}
{
  < WHILE > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA >
}

void If() :
{}
{
  < IF > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA >
  (
    < ELSE > < LCHAVETA > 
    Stmtlst() < RCHAVETA >
  )?
}

void Call() :
{}
{
  < ID > ("." < ID >)? < LPAR >
  (
    ArgumentList()
  )?
  < RPAR >
}

void CallNoID(String id) #Call:
{ }
{
  {jjThis.setValue(id);}
  ("." < ID >)? < LPAR >
  (
    ArgumentList()
  )?
  < RPAR >
}
  

void ArgumentList() :
{}
{
  Argument()
  (
    < VIRG > Argument()
  )*
}

void Argument() :
{}
{
  (
    < ID >
  | < STRING >
  | < INTEGER >
  )
}

void ArrayAccess() :
{}
{
  < ID > "[" Index() "]"
}

void ArrayAccessNoID(String id) #ArrayAccess:
{ }
{
  {jjThis.setValue(id); }
  "[" Index() "]"
}

   

void ScalarAccess() :
{}
{
  < ID > ("." < SIZE >)?
}

void ScalarAccessNoID(String id) #ScalarAccess:
{ }
{
  {jjThis.setValue(id); }
  ("." < SIZE >)?
}

void Index() :
{}
{
  < ID >
| < INTEGER >
}
