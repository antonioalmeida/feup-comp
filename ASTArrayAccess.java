import semantic.Symbol;

/* Generated By:JJTree: Do not edit this line. ASTArrayAccess.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTArrayAccess extends SimpleNode {
	public ASTArrayAccess(int id) {
		super(id);
	}

	public ASTArrayAccess(Yal p, int id) {
		super(p, id);
	}

	public Symbol.Type getReturnType() {
		return Symbol.Type.SCALAR;
	}
	
	public boolean analyseSymbolTable() {
		if(!verifySymbolTypes(value, true, Symbol.Type.ARRAY)) {
			System.out.println("Semantic Error: " + value + " should have been initialized as an array");
			return false;
		}

		return true;
	}

	public String generateCode() {
		String code = "";

		// ArrayAccess -> <ID> [ Index ]

		//TODO: check if it's a static field
		// or a local variable, right now we're 
		//assuming it's always a static field

		code += "getstatic " + this.value;
		if(getReturnType().equals(Symbol.Type.ARRAY))
			code += " [I";
		else 
			code += " I";
		code += "\n";

		code += ((SimpleNode) children[0]).generateCode();

		code += "iaload\n";

		return code;
	}

}
/* JavaCC - OriginalChecksum=9555d33a34fc82551229c4905477e2a1 (do not edit this line) */
