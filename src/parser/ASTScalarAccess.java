/* Generated By:JJTree: Do not edit this line. ASTScalarAccess.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;
import semantic.Symbol;
public
class ASTScalarAccess extends SimpleNode {
	
	protected boolean size_array = false;
	
	public ASTScalarAccess(int id) {
		super(id);
	}

	public ASTScalarAccess(Yal p, int id) {
		super(p, id);
	}

	public void set_size_access(boolean set){
		size_array = set;
	}
	
	public String toString(String prefix) { 
		String node = prefix + toString();
	
		if (this.getValue() != null){
			if (this.size_array == true)
				node += " [" + "sizeof(" + this.getValue() + ")]";
			else 
				node += " [" + this.getValue() + "]";
		}

		return node; 
	}

	public boolean analyseSymbolTable() {
		

		if(size_array) {    	
			if(!symbolTable.getSymbolType(getValue()).equals(Symbol.Type.ARRAY)) {
				//System.out.println("Semantic Error: " + this.value + " has not been previously declared as an array");
				printSemanticError(this.getValue() + " has not been previously declared as an array");
				return false;
			}
		}
		
		if(parent.toString().equals("Assign"))
			addCodeLine(getValue(), true);
		else
			addCodeLine(getValue(), false);
		
		return true;
	}
	
	public boolean getSizeArray() {
		return size_array;
	}

	public Symbol.Type getReturnType() {
		String symbolName = ((String) jjtGetValue());
		Symbol.Type type = symbolTable.getSymbolType(symbolName);
		
		if(size_array)
			if(!type.equals(Symbol.Type.VOID))
				return Symbol.Type.SCALAR;
	
		return symbolTable.getSymbolType(symbolName);
	}

	public String generateCode() {
		String generatedCode = "";

		//TODO: check if it's a static field
		// or a local variable, right now we're 
		//assuming it's always a static field


		generatedCode += "getstatic " + this.getValue();
		if(getReturnType().equals(Symbol.Type.ARRAY))
			generatedCode += " [I";
		else 
			generatedCode += " I";

		generatedCode += "\n";
		return generatedCode;
	}

}
/* JavaCC - OriginalChecksum=16ff28a893f89d1df539718e6570aaf5 (do not edit this line) */
