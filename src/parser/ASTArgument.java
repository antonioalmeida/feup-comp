/* Generated By:JJTree: Do not edit this line. ASTArgument.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;
import semantic.Symbol;
public
class ASTArgument extends SimpleNode {
  public ASTArgument(int id) {
    super(id);
  }

  public ASTArgument(Yal p, int id) {
    super(p, id);
  }

  public Symbol.Type getReturnType() {
	  if(getChildren() != null && getChildren().length > 0) {
		  
		  if(getChildren()[0].toString().equals("Integer"))
			  return Symbol.Type.SCALAR;
		  else if(getChildren()[0].toString().equals("String"))
			  return Symbol.Type.SCALAR;
		  else if(getChildren()[0].toString().equals("Id")) {
			  if(! verifySymbolTypes(getValue(), true, Symbol.Type.ARRAY, Symbol.Type.SCALAR)) {
				  //System.out.println("Semantic Error: Variable "+value+" has to be  initialized in order to be used as an argument in a function call.");
				  printSemanticError("Variable "+getValue()+" has to be  initialized in order to be used as an argument in a function call");
				  return Symbol.Type.UNDEFINED;
			  }
			  return symbolTable.getSymbolType(getValue());
		  }
		 
	  }
	  return Symbol.Type.UNDEFINED;
			  
  }

   
  public int getArgumentType(){
	  SimpleNode typeArgument = (SimpleNode) jjtGetChild(0);
	  return typeArgument.id;
  }

}
/* JavaCC - OriginalChecksum=72003e407e2fb93a10460fdf05eb3827 (do not edit this line) */
