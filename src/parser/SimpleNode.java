/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;
import java.util.ArrayList;

import codeGeneration.CodeLine;
import codeGeneration.FunctionInstructions;
import semantic.FunctionTable;
import semantic.Symbol;
import semantic.SymbolTable;
import utils.IntegerReference;
import utils.Pair;
public
class SimpleNode implements Node {

    protected Node parent;
    private Node[] children;
    protected int id;
    private String value;
    protected Yal parser;
    protected SymbolTable symbolTable;
    protected FunctionTable functionTable;
    private CodeLine codeLine;
    protected boolean hasScope;
    protected boolean hasFunctionScope;
    protected boolean hasCodeLineScope;
    protected Token firstToken;
    protected Token lastToken;
    protected FunctionInstructions functionInstructions;
    protected int firstLine;
    protected ArrayList<Integer> lastLines;
    private IntegerReference codeLineCounter;
    
    public Token jjtGetFirstToken() {
        return firstToken;
    }

    public void jjtSetFirstToken(Token token) {
        firstToken = token;
    }

    public Token jjtGetLastToken() {
        return lastToken;
    }

    public void jjtSetLastToken(Token token) {
        lastToken = token;
    }
    
    public SimpleNode(int i) {
            this.setValue("");
            this.hasScope = false;
            this.hasFunctionScope = false;
            this.hasCodeLineScope = false;
            id = i;
    }
     
    public SimpleNode(Yal p, int i) {
            this(i);
            parser = p;
    }
    
    public SimpleNode(int i, boolean hasScope, boolean hasFunctionScope, boolean hasCodeLineScope) {
    this.setValue("");
    this.hasScope = hasScope;
    this.hasFunctionScope = hasFunctionScope;
    this.hasCodeLineScope = hasCodeLineScope;
        id = i;
    }

    public SimpleNode(Yal p, int i, boolean hasScope, boolean hasFunctionScope, boolean hasCodeLineScope) {
        this(i, hasScope, hasFunctionScope, hasCodeLineScope);
        parser = p;
    }

    public SymbolTable getAssignedSymbolTable() {
        if(parent == null)
            return null;
        else if(hasScope)
        	if(toString().equals("Function"))
        		return new SymbolTable(((SimpleNode) parent).getSymbolTable(), true);
        	else	
        		return new SymbolTable(((SimpleNode) parent).getSymbolTable());
        else
            return ((SimpleNode) parent).getSymbolTable();
    }
    
    public FunctionTable getAssignedFunctionTable() {
    	if(parent == null)
    		return null;
    	else if(hasFunctionScope)
    		return new FunctionTable();
    	else
    		return ((SimpleNode) parent).getFunctionTable();
    }
    
    public boolean hasCodeLine() {
    	if(parent == null || ((! toString().equals("Function")) && ((SimpleNode) parent).codeLineCounter == null))
    		return false;
    	else
    		return true;
    }
    
    public void assignCodeLine() {
    	if(!hasCodeLine()) {
    		this.functionInstructions = null;
    		codeLineCounter = null;
    	}
    	else { 
    		if(toString().equals("Function")) {
    			codeLineCounter = new IntegerReference();
    			this.functionInstructions = new FunctionInstructions();
    		}
    		else {
    			codeLineCounter = ((SimpleNode) parent).codeLineCounter;
    			this.functionInstructions = ((SimpleNode) parent).functionInstructions;
    		}
    		if(hasCodeLineScope) {
    			this.codeLine =  new CodeLine(codeLineCounter.getValue());
    			this.functionInstructions.addInstruction(this.codeLine);
    			codeLineCounter.inc();
    		}
    		else
    			this.codeLine = ((SimpleNode) parent).getCodeLine();
    	}
    }
    
    public void addCodeLine(String name, boolean store) {
    	codeLine.addToUsesAndDefs(name, store);
    }
    
    public void jjtOpen() {}

    public void jjtClose() {}

    public void jjtSetParent(Node n) { parent = n; }

    public Node jjtGetParent() { return parent; }

    public void jjtAddChild(Node n, int i) {
        if (getChildren() == null)
            setChildren(new Node[i + 1]); 
        else if (i >= getChildren().length) {
            Node c[] = new Node[i + 1];

            System.arraycopy(getChildren(), 0, c, 0, getChildren().length);
            setChildren(c);
        }

        getChildren()[i] = n;
    }

    public Node jjtGetChild(int i) {
        return getChildren()[i];
    }

    public int jjtGetNumChildren() {
        return (getChildren() == null) ? 0 : getChildren().length;
    }

    public void jjtAddValue(String value) { this.setValue(this.getValue() + value); }
    
    public void jjtSetValue(String value) {this.setValue(value);}

    public Object jjtGetValue() { return getValue(); }

    /* You can override these two methods in subclasses of SimpleNode to
         customize the way the node appears when the tree is dumped.  If
         your output uses more than one line you should override
         toString(String), otherwise overriding toString() is probably all
         you need to do. */

    public String toString() {
        return YalTreeConstants.jjtNodeName[id]; 
    }
    
    public String toString(String prefix) {
        String node = prefix + toString();
    
        if(this.getValue() != "")
            node += " [" + this.getValue() + "]";

        return node; 
    }

    /* Override this method if you want to customize how the node dumps
         out its children. */

    public void dump(String prefix) {
        System.out.println(toString(prefix));
        
        if(getChildren() != null) {
            /*
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode)children[i];
                if (n != null) {
                    n.dump(prefix + "   ");
                }
            }
            */

            for(Node child : getChildren())
                if(child != null)
                    ((SimpleNode ) child).dump(prefix + "   ");
        }
    }
    
    public void dumpUsesDefs(String prefix) {
    	System.out.print(toString(prefix)+" : ");
    	if(codeLine == null)
    		System.out.print("null");
    	else
    		codeLine.print();
    	if(lastLines != null) {
    	System.out.print("  first: "+firstLine);
    	System.out.print(" lastLines: [");
    	for(int i=0; i < lastLines.size(); i++) {
    		if(i < lastLines.size()-1)
    			System.out.print(lastLines.get(i)+ ", ");
    		else
    			System.out.print(lastLines.get(i)+ "");
    	}
    	}
    	System.out.println("]");
        
        if(getChildren() != null) {
            /*
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode)children[i];
                if (n != null) {
                    n.dump(prefix + "   ");
                }
            }
            */

            for(Node child : getChildren())
                if(child != null)
                    ((SimpleNode ) child).dumpUsesDefs(prefix + "   ");
        }
    }
    
    public void dumpSuccessorsAntecessors() {
    	if(toString().equals("Function")) {
    		System.out.println(value);
    		functionInstructions.printSuccessorsAntecessors();
    		System.out.println("");
    	}
    	else {
    		 if(getChildren() != null) {
    	            /*
    	            for (int i = 0; i < children.length; ++i) {
    	                SimpleNode n = (SimpleNode)children[i];
    	                if (n != null) {
    	                    n.dump(prefix + "   ");
    	                }
    	            }
    	            */

    	            for(Node child : getChildren())
    	                if(child != null)
    	                    ((SimpleNode ) child).dumpSuccessorsAntecessors();
    	}
    }
    }

    public String generateCode() {
        String generatedCode = "";

        if (getChildren() != null) {
            for(int i = 0; i < getChildren().length; ++i) {
                SimpleNode n = (SimpleNode) getChildren()[i];

                if(n != null) {
                    generatedCode += n.generateCode();
                }
            }
        }

        return generatedCode;
    }
    
    /**
     * If checkInitialized equals true, this function checks if a variable symbolName has been initialized to one of types
     * If checkInitialized equals false, this function checks if a variable symbolName has not been initialized to any type different from types
     */
    public boolean verifySymbolTypes(String symbolName, boolean checkInitialized, Symbol.Type... types ) {
        return symbolTable.verifySymbolTypes(symbolName, checkInitialized, checkInitialized, types);
    }

    public boolean initializeSymbol(String symbolName, Symbol.Type type, boolean initialized) {
        return symbolTable.initializeSymbol(symbolName, type, initialized, true);
    }
    
    public boolean initializeSymbol(String symbolName, Symbol.Type type, boolean initialized, boolean print) {
        return symbolTable.initializeSymbol(symbolName, type, initialized, print);
    }

    public boolean initializeSymbol(String symbolName, Symbol.Type type, boolean initialized, boolean print, int index) {
        return symbolTable.initializeSymbol(symbolName, type, initialized, print, true, index);
    }

    public int getSymbolIndex(String symbolName) {
        return symbolTable.getSymbolIndex(symbolName);
    }
    
    public int getId() {
        return id;
    }
    
    public SymbolTable getSymbolTable() {
        return symbolTable;
    }
    
    public FunctionTable getFunctionTable() {
    	return functionTable;
    }
    
    public CodeLine getCodeLine() {
    	return codeLine;
    }
    
    public boolean analyseSymbolTable() {
        return true;
    }
    
   public void addToLastLines(Integer line) {
	   if(lastLines.size() == 0)
		   lastLines.add(line);
	   else if(lastLines.get(lastLines.size() - 1) != line)
		   lastLines.add(line);
   } 
   public void codeLineHandler() {
	   if(hasCodeLine()) {
	   if(children == null || children.length == 0) {
		   firstLine = codeLine.getIndex();
		   lastLines = new ArrayList<Integer>();
		   addToLastLines(codeLine.getIndex());
	   }
	   else {
		  
		  /*CodeLine newCodeLine = ((SimpleNode) children[0]).codeLine;
		  firstLine = newCodeLine.getIndex();*/
		   firstLine = ((SimpleNode) children[0]).firstLine;
		  
		   lastLines = new ArrayList<Integer>();
		   if(toString().equals("If") || toString().equals("While") || (toString().equals("IfStatement") && children.length < 2))
			   addToLastLines(firstLine);
		   if(toString().equals("IfStatement") && children.length == 2) {
			   ArrayList<Integer> newLastLines = ((SimpleNode )children[0]).lastLines;
			   for(int  i = 1; i < newLastLines.size(); i++)
				   addToLastLines(newLastLines.get(i));
			}
		   
		   if(toString() != "While") {
			   ArrayList<Integer> newLastLines = ((SimpleNode )children[children.length-1]).lastLines;
		   	   for(int  i = 0; i < newLastLines.size(); i++)
		   		  addToLastLines(newLastLines.get(i));
		   }
		   
		   
	   }
	   }
   }
   
  
   
   public void handleSuccessorsAntecessors() {
	   if(getChildren() != null) {
           for(Node child : getChildren()) {
               ((SimpleNode) child).handleSuccessorsAntecessors();          
           }
       }
	   if(hasCodeLine()) {
		   if(toString().equals("Function")) {
			   functionInstructions.setNameToIndex(symbolTable.getNameToIndex());
			   functionInstructions.setMaxIndex(symbolTable.getMaxIndex());
			   functionInstructions.setNArgs(((ASTFunction) this).getNArgs());
		   }
	   if(children != null && children.length > 1) {
		   if(toString().equals("IfStatement")) {
			   ArrayList<Integer> antecessors = new ArrayList<Integer>();
			   antecessors.add(firstLine);
			   functionInstructions.addSuccessorsAntecessors(antecessors, ((SimpleNode) children[1]).firstLine);
		   }
		   else {
			   for(int i= 0; i <children.length - 1; i++) {
				   functionInstructions.addSuccessorsAntecessors(((SimpleNode) children[i]).lastLines, ((SimpleNode) children[i + 1]).firstLine);
			   }
		   	   if(toString().equals("While"))
		   			functionInstructions.addSuccessorsAntecessors(((SimpleNode) children[children.length-1]).lastLines, ((SimpleNode) children[0]).firstLine);
		   }
	   }
	   }
   }
   
   @SuppressWarnings("unchecked")
public void handleOptimizationR(int optRN) {
	   if(toString().equals("Function")) {
		   
		   Pair pair;
		   pair = functionInstructions.registerAssignement();
		   ArrayList<Integer> newIndexes = (ArrayList<Integer>) pair.getValue();
		   int variablesUsed = (int) pair.getKey();
		   if(variablesUsed > optRN) {
			   System.out.println("Error: The minimum number of registers required for function "+getRealValue()+ " is "+variablesUsed);
		   }
		   else {
			   System.out.println("The new assignement of registers for the variables of function "+getRealValue() + " is as follows:");
			   for(int i = 0; i < newIndexes.size(); i++) {
				   Pair variable = symbolTable.getIndexToName().get(i);
				   System.out.println("   " + variable.getKey()+" => "+"lv"+newIndexes.get(i));
				   ((Symbol) variable.getValue()).setIndex(newIndexes.get(i));
			   }
		   }
	   }
	   else if(toString().equals("Program") || toString().equals("Module")) {
		   if(getChildren() != null) {
	           for(Node child : getChildren()) {
	               ((SimpleNode) child).handleOptimizationR(optRN);          
	           }
	       }
	   }
		 
   }
   
    public boolean analyse() {
        symbolTable = getAssignedSymbolTable();
        functionTable = getAssignedFunctionTable();
        assignCodeLine();
        boolean result = true;
    
        if(getChildren() != null) {
            for(Node child : getChildren()) {
                if(!((SimpleNode) child).analyse())
                    result = false;
            }
        }
        
        if(!analyseSymbolTable())
            result = false;
        
        codeLineHandler();
        return result;
    }

    public int attributeIndexes(int lastIndex) {
        int currentIndex = lastIndex;
        if(hasScope)
            currentIndex = symbolTable.attributeIndexes(currentIndex);

        if(getChildren() != null) {
            for(Node child : getChildren()) {
                currentIndex = ((SimpleNode) child).attributeIndexes(currentIndex);
            }
        }

        return currentIndex;
    }

    //public void printSymbolTableScope(String prefix)
    
    public void printSymbolTable(String prefix) {
        if(hasScope) {
        	 String printMessage = prefix+"@" + toString();
        	 if(toString().equals("Function"))   
        		 printMessage += " [" + this.getRealValue() + "]";
        	 else if(! this.getValue().equals(""))
        		 printMessage += " [" + this.getValue() + "]";
        	
            System.out.println(printMessage);
            symbolTable.printSymbols(prefix+"   ");
        }

        if (getChildren() != null) {
            for (int i = 0; i < getChildren().length; ++i) {
                SimpleNode n = (SimpleNode)getChildren()[i];
                if (n != null) {
                    n.printSymbolTable(prefix + "   ");
                }
            }
        }
    }
    
    public void printFunctionTable(String prefix) {
    	if(hasFunctionScope) {
            System.out.println(toString(prefix+"@"));
            functionTable.printFunctions(prefix+"   ");
        }

        if (getChildren() != null) {
            for (int i = 0; i < getChildren().length; ++i) {
                SimpleNode n = (SimpleNode)getChildren()[i];
                if (n != null) {
                    n.printFunctionTable(prefix + "");
                }
            }
        }
    }
    
    public Symbol.Type getReturnType() {
        return Symbol.Type.VOID;
    }
        
    public boolean getSizeArray() {
        return false;
    }
        
    public String getRealValue() {
        if(getValue().equals(""))
            if(getChildren() != null && getChildren().length > 0)
                return ((SimpleNode) getChildren()[0]).getRealValue();
                
        return getValue();
    }
    

    public void printSemanticError(String errorMsg) {
    	String functionName = getFunction();
    	String functionModuleMsg = ", module "+getModule();
    	if(! functionName.equals(""))
    		functionModuleMsg += ", function "+functionName;
    	System.out.println("Semantic Error at line "+firstToken.beginLine +  ", column "+firstToken.beginColumn  +functionModuleMsg+": "+errorMsg + ".");
    }
    
    public String getFunction() {
    	return ((SimpleNode) parent).getFunction();
    }
    
    public String getModule() {
    	return ((SimpleNode) parent).getModule();
    }

    

    public int getLastIndex() {
        return symbolTable.getIndexCount();
    }

	public Node[] getChildren() {
		return children;
	}

	public void setChildren(Node[] children) {
		this.children = children;
	}

	public String getValue() {
		return value;
	}

	public void setValue(String value) {
		this.value = value;
	}

}

/* JavaCC - OriginalChecksum=ddfb1251cda21b9eb5aadc721edc8350 (do not edit this line) */
