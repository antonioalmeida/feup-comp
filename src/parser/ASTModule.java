/* Generated By:JJTree: Do not edit this line. ASTModule.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;
import semantic.SymbolTable;
public
class ASTModule extends SimpleNode {
    SymbolTable functions;

    public ASTModule(int id) {
        super(id, true, true, false);
    }

    public ASTModule(Yal p, int id) {
        super(p, id, true, true, false);
    }

    public boolean analyse() {
    	 symbolTable = getAssignedSymbolTable();
    	 functionTable = getAssignedFunctionTable();
    	 assignCodeLine();
    	 boolean result = true;
    	   
    	if(!analyseSymbolTable())
    			result = false;
    	
        
        if(getChildren() == null)
            return false;

        

        result = true;

        

        for(Node child : getChildren()) {
        	if(child.toString().equals("Declaration")) {
        		if(!((SimpleNode) child).analyse())
        			result = false;
        	}
        	else if(child.toString().equals("Function")) {
        		if(!((ASTFunction) child).addFunctionEntry())
        			result =  false;
        	}
        }
        
        for(Node child : getChildren()) {
        	
        	if(child.toString().equals("Function")) {
        		if(!((SimpleNode) child).analyse())
        			result = false;
        	}
        }

        return result;
    }

    /*public boolean analyseFunctionHeaders() {
        for(Node child : children) {
            if(child.toString().equals("Function"))
                ((ASTFunction) child).analyseHeader();
        }

        return true;
    }*/
    public String getFunction() {
    	return "";
    }
    
    public String getModule() {
    	return getValue();
    }

}
/* JavaCC - OriginalChecksum=3be8fbcbb3166b23f98c2a274d32ff92 (do not edit this line) */
