/* Generated By:JJTree: Do not edit this line. ASTIndex.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package parser;
import semantic.Symbol;
import utils.Utils;
public
class ASTIndex extends SimpleNode {
    public ASTIndex(int id) {
        super(id);
    }

    public ASTIndex(Yal p, int id) {
        super(p, id);
    }
 
    public boolean analyseSymbolTable() {
       
        if(!Utils.isInteger(this.getValue())) {
            if(!verifySymbolTypes(this.getValue(), true, Symbol.Type.SCALAR)) {
                //System.out.println("Semantic Error: Index of an array " + this.value + " should have been initialized to a scalar");
                printSemanticError("Index of an array " + this.getValue() + " should have been initialized to a scalar");
            	return false;
            }
        	addCodeLine(this.getValue(), false);
        }
        return true;
    }

    public String generateCode() {
        String generatedCode = "";

        // when Index -> <INTEGER>
        if(Utils.isInteger(this.getValue())) {
            generatedCode = "iload " + this.getValue() + "\n";
            return generatedCode;  
        }


        //TODO: check if it's a static field
        // or a local variable, right now we're 
        //assuming it's always a static field

        generatedCode += "getstatic " + this.getValue();
        if(getReturnType().equals(Symbol.Type.ARRAY))
            generatedCode += " [I";
        else 
            generatedCode += " I";

        generatedCode += "\n";
        return generatedCode;
    }

}
/* JavaCC - OriginalChecksum=b5fbd60ca6e041d0f89b61336bc0b555 (do not edit this line) */
