/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal.jj */
/*@egen*/

options
{
  LOOKAHEAD= 1;
               
}

PARSER_BEGIN(Yal)
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;



public class Yal/*@bgen(jjtree)*/implements YalTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTYalState jjtree = new JJTYalState();

/*@egen*/
		
  private static Yal myYal;
  
  public static void main(String args []) throws ParseException
  {
    
    if( validArgs(args) == false)
    	return;
    else { 
    	SimpleNode root = myYal.Program(); // devolve refer\u00eancia para o n\u00f3 raiz da \u00e1rvore
      root.analyse();
    	root.dump(""); // imprime no ecr\u00e3 a \u00e1rvore
    }
  }

  public static File validFilePath(String filePath) {
		File file = new File(filePath);
		
		if(file.exists())
			return file;		
		else
			return null;
			
  }
  	
  public static boolean validArgs(String args []) {

		if(args.length > 1) { 
			System.out.println("Invalid number of arguments");
			return false;
		}
		
		else if(args.length == 0)
			myYal = new Yal(System.in);

		else if(args.length == 1) {
                        File file;
                        if( (file = validFilePath(args[0])) == null) {
                                System.out.println("Invalid file Path");
                                return false;
                        }
                        else {
                                FileInputStream stream;
								try {
									stream = new FileInputStream(file);
									myYal = new Yal(stream);
								} catch (FileNotFoundException e) {
									System.out.println("Error in stream constructor: ");
									e.printStackTrace();
									return false;
								}
                                
                        }
        }
		

		return true;
  }

 
  	
  public static void errorSkipTo(ParseException e, String errorMessage,  SkipToken... skipTargets) {
    System.out.println("Syntatic Error on " + errorMessage + ". " + e.toString());
    Token t1;
    boolean foundTarget = false;

	 //System.out.println(token);
	
    do {
      t1 = getToken(1);

	  for(int i = 0; i < skipTargets.length && foundTarget == false; i++)
	  	 if(skipTargets[i].getToken() == t1.kind) {
	  	 	foundTarget = true;
	  	 	if(skipTargets[i].isConsumed() == true)
	  	 	  getNextToken();

	  	 	/*else {
	  	 	  System.out.println(t1); 
	  	 	  System.out.println(skipTargets[i].token);	  	 	 
	  	 	 
	  	 	}*/
	  	 }
	  
     

      if(!foundTarget)
      	getNextToken();
      	
    } while (!foundTarget);

     //System.out.println(token);
  }

  public static void coverageBlock() throws ParseException {
	Token t1;
    t1 = getNextToken();
    if(t1.kind == LCHAVETA) {
      StmtlstError();
    }
  }
}

PARSER_END(Yal)

< DEFAULT >
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      "*"
    | ~[ "*", "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

/* reserved words */
< DEFAULT >
TOKEN :
{
  < RELA_OP :
    ">"
  | "<"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ADDSUB_OP :
    "+"
  | "-" >
| < ARITH_OP :
    "*"
  | "/"
  | "<<"
  | ">>"
  | ">>>" >
| < BITWISE_OP :
    "&"
  | "|"
  | "^" >
| < NOT_OP : "!" >
| < WHILE : "while" >
| < IF : "if" >
| < ELSE : "else" >
| < ASSIGN : "=" >
| < ASPA : "\"" >
| < LPAR : "(" >
| < RPAR : ")" >
| < VIRG : "," >
| < PVIRG : ";" >
| < LCHAVETA : "{" >
| < RCHAVETA : "}" >
| < FUNCTION : "function" >
| < MODULE : "module" >
| < SIZE : "size" >
}

< DEFAULT >
TOKEN :
{
  < INTEGER : (< DIGIT >)+ >
| < ID :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "$", "A"-"Z", "_", "a"-"z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING : "\"" ([ "a"-"z", "A"-"Z", "0"-"9", ":", " ", "=" ])+ "\"" >
}

SimpleNode Program() :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  Module()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Module() : 
{/*@bgen(jjtree) Module */
 ASTModule jjtn000 = new ASTModule(JJTMODULE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/
  try { 
  < MODULE > t=< ID >{jjtn000.jjtSetValue(t.image);} < LCHAVETA > }catch(ParseException e) {
    System.out.println("Syntatic error on module declaration. " + e.toString());
    Token t1;
    return;    
  }
  try { 
  (
    Declaration()
  )* }catch(ParseException e) {
		errorSkipTo(e, "declarations module area", new SkipToken(PVIRG, true));
     }
  try { 
  (
    Function()
  )*
  < RCHAVETA > } catch(ParseException e) {
    errorSkipTo(e, "functions module area", new SkipToken(RCHAVETA, true));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Declaration() :
{/*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  (
    Element()
  )
  (
    < ASSIGN >
    (
      (
        "[" ArraySize() "]"
      )
    | (< ADDSUB_OP >)? < INTEGER >
    )
  )?
  < PVIRG >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Function() : {/*@bgen(jjtree) Function */
                    ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null;}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/ 
  try {
    < FUNCTION > t=< ID >{jjtn000.jjtSetValue(t.image);} }catch(ParseException e) {
			errorSkipTo(e, "function name", new SkipToken(LPAR, false));
       }
    try { 
    (
      (
        (
          ArrayElementNoID(t.image)
        | ScalarElementNoID(t.image)
        )
       	FunctionAssign()
        < LPAR >
        (
          Varlist()
        )?
        < RPAR >
      )
    |
      (
  	 < LPAR >
        (
          Varlist()
        )?
        < RPAR >
      )
    )
  } 
  catch(ParseException e) {
    errorSkipTo(e, "function declaration", new SkipToken(RPAR, true));
  }
  try { 
  < LCHAVETA > Stmtlst() < RCHAVETA > } catch(ParseException e) {
		errorSkipTo(e, "function body",  new SkipToken(RCHAVETA, true));
    }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionAssign() : {/*@bgen(jjtree) FunctionAssign */
                         ASTFunctionAssign jjtn000 = new ASTFunctionAssign(JJTFUNCTIONASSIGN);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FunctionAssign */
         try {
/*@egen*/
	
	 < ASSIGN > t=< ID >/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ 
	 {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Varlist() : {/*@bgen(jjtree) Varlist */
                   ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1, t2; }
{/*@bgen(jjtree) Varlist */
  try {
/*@egen*/ t1 = < ID >
  (
    ArrayElementNoID(t1.image)
  | ScalarElementNoID(t1.image)
  )
  (
    < VIRG >  t2 = < ID >
    (
     ArrayElementNoID(t2.image)
    | ScalarElementNoID(t2.image)
    )
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Element() :{/*@bgen(jjtree) Element */
                 ASTElement jjtn000 = new ASTElement(JJTELEMENT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Element */
        try {
/*@egen*/
	t=<ID> (
		ArrayElementNoID(t.image)
	  | ScalarElementNoID(t.image)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElementNoID(String id)              :
{/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayElement */
        try {
/*@egen*/
	{jjtn000.jjtSetValue(id);}
  "[" "]"/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void ScalarElementNoID(String id)               :
{/*@bgen(jjtree) ScalarElement */
  ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScalarElement */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{jjtn000.jjtSetValue(id);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayElement() :
{/*@bgen(jjtree) ArrayElement */
  ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayElement */
  try {
/*@egen*/
  < ID > "[" "]"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ScalarElement() :
{/*@bgen(jjtree) ScalarElement */
  ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ScalarElement */
  try {
/*@egen*/
  < ID >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmtlst()      :
{}
{
  (
    Stmt()
  )*
}

void StmtlstError()       :
{}
{
  (
    Stmt()
  )*"}"
}

void Stmt()      : { Token t; }
{
  try { 
    While()
  | If() 
  |(
    t = < ID >
  ( 
     AssignNoPoint(t.image)
  | CallVirg(t.image) |  "."NoPointAssignCallVirg(t.image))) 
  } 
  catch(ParseException e) {
  	System.out.println("Syntatic error during Statement declaration. " + e.toString());
      Token t2;

      do {
        t2 = getNextToken();

        /*
        if(t2.kind == LCHAVETA) {
          StmtlstError();
          return;
        }*/
      } while(t2.kind != PVIRG);
    }
}

void NoPointAssignCallVirg(String id)      :
{}
{
  (
    < ID > CallVirg(id)) | (< SIZE > AssignNoPoint(id))
}

void Assign() :
{/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  Lhs() < ASSIGN > Rhs() < PVIRG >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignNoID(String id)        :
{/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  
  try {
    LhsNoID(id) < ASSIGN > Rhs() < PVIRG >
  }
  catch(ParseException e) {
    errorSkipTo(e, "assignment", new SkipToken( PVIRG, true));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignNoPoint(String id)        :
{/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/
  
  try {
    LhsNoPoint(id) < ASSIGN > Rhs() < PVIRG >
  }
  catch(ParseException e) {
    errorSkipTo(e, "assignment",  new SkipToken(PVIRG, true));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
  

void Lhs()      :
{Token t;}
{
  t = < ID >(
  ArrayAccessNoID(t.image)
| ScalarAccessNoID(t.image))
}

void LhsNoID(String id)      :
{ }
{
  /*{jjtThis.jjtSetValue(id);}*/
  ArrayAccessNoID(id)
| ScalarAccessNoID(id)
}
  
void LhsNoPoint(String id)      :
{ }
{
  ArrayAccessNoID(id)
| ScalarAccessNothing(id)
}
  

void Rhs():
{/*@bgen(jjtree) Rhs */
 ASTRhs jjtn000 = new ASTRhs(JJTRHS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null;}
{/*@bgen(jjtree) Rhs */
  try {
/*@egen*/ { }
  (
    Term()
    (
      (
        t=< ARITH_OP >
      | t=< BITWISE_OP >
      | t=< ADDSUB_OP >
      )
      {jjtn000.jjtSetValue(t.image);}
      Term()
    )?
  )
| "[" ArraySize() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void ArraySize() :
{/*@bgen(jjtree) ArraySize */
 ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArraySize */
  try {
/*@egen*/
  ScalarAccess()
| t=< INTEGER >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Term() :
{/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t,t2=null;
}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  (t2=< ADDSUB_OP >{jjtn000.set_sign(t2.image);})?
  (
    t=< INTEGER >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.jjtSetValue(t.image);}
  |
    ( 
      t = < ID > 
      (Call(t.image) | "." PointCallScalarAccess(t.image) | ArrayAccessNoID(t.image) 
		| ScalarAccessNothing(t.image))  
        
    )
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  
}



void Exprtest() :
{/*@bgen(jjtree) Exprtest */
 ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Exprtest */
  try {
/*@egen*/
  < LPAR > Lhs() t=< RELA_OP > Rhs() < RPAR >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While():
{/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
    try {
/*@egen*/ 
    try {
      < WHILE > Exprtest() < LCHAVETA > 
    }
    catch(ParseException e) {
      errorSkipTo(e, "WHILE statement declaration",  new SkipToken(LCHAVETA, true));
    }
    Stmtlst() < RCHAVETA >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If() :
{/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  try {
    < IF > Exprtest() < LCHAVETA > Stmtlst() < RCHAVETA >
  }
  catch (ParseException e) {
    errorSkipTo(e, "IF statement",  new SkipToken(RCHAVETA, true));
  }

  try {
    (
      < ELSE > < LCHAVETA >
      Stmtlst() < RCHAVETA >
    )?
  }
  catch (ParseException e) {
    System.out.println("Syntatic error on ELSE statement. " + e.toString());
    Token t1;
    boolean hasBrackets = false;
    // If left brackets is found, skip to right bracket
    // otherwise, skip to ';'

    // TODO: Refactor this later
    do {
      t1 = getNextToken();
      if(t1.kind == LCHAVETA) {
        hasBrackets = true;
        break;
      }
    } while (t1.kind != PVIRG);

    if(hasBrackets) {
      do {
        t1 = getNextToken();
      } while (t1.kind != RCHAVETA);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Call (String id)      :
{/*@bgen(jjtree) Call */
 ASTCall jjtn000 = new ASTCall(JJTCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null; }
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  try {
    < LPAR > }catch(ParseException e) {
		errorSkipTo(e, ": function call must have parentheses", new SkipToken(RPAR, false), new SkipToken(PVIRG, true));
		return;
      }
    try {
		(
		  ArgumentList()
		)?
		<  RPAR >
      }catch(ParseException e) {
        errorSkipTo(e, "function call", new SkipToken(RPAR, true));
      }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(id);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
	
}
  
   
void CallVirg (String id)      :
{/*@bgen(jjtree) Call */
 ASTCall jjtn000 = new ASTCall(JJTCALL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null; }
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  try {
    < LPAR > }catch(ParseException e) {
		errorSkipTo(e, ": function call must have parentheses", new SkipToken(RPAR, false), new SkipToken(PVIRG, true));
		return;
      }
    try {
		(
		  ArgumentList()
		)?
		<  RPAR > < PVIRG >
      }catch(ParseException e) {
        errorSkipTo(e, "function call", new SkipToken(RPAR, true));
        coverageBlock();
      }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(id);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
	
}

void ArgumentList()      :
{}
{
  Argument()
  (
    < VIRG > Argument()
  )*
}

void Argument() :
{/*@bgen(jjtree) Argument */
 ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Argument */
  try {
/*@egen*/
  (
    t=< ID >
  | t=< STRING > 
  | t=< INTEGER > 
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayAccess() :
{/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAccess */
  try {
/*@egen*/
  < ID > "[" Index() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayAccessNoID(String id)             :
{/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) ArrayAccess */
  try {
/*@egen*/
  {jjtn000.jjtSetValue(id); }
  "[" Index() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ScalarAccess()      :
{Token t;}
{
  t=< ID > ScalarAccessNoID(t.image)
}

void ScalarAccessNoID(String id)              :
{/*@bgen(jjtree) ScalarAccess */
  ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null;}
{/*@bgen(jjtree) ScalarAccess */
  try {
/*@egen*/
  {jjtn000.jjtSetValue(id); }
  ("." < SIZE >{jjtn000.set_size_access(true);})?/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void ScalarAccessNothing(String id)              :
{/*@bgen(jjtree) ScalarAccess */
  ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t=null; }
{/*@bgen(jjtree) ScalarAccess */
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(id); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
    
} 

void PointCallScalarAccess(String id)      :
{
  
}
{
  (
    < ID >  Call(id)) | (< SIZE > ScalarAccessNothing(id))
}

/*void CallScalarAccessVirgPoint(String id) #void:
{
  
}
{
  (
    < ID > CallLPARVirg(id)) | (< SIZE > ScalarAccessNothing(id))
}*/

void Index() :
{/*@bgen(jjtree) Index */
 ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Index */
try {
/*@egen*/
( t=< ID >
| t=< INTEGER >)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}