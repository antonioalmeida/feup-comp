
import semantic.Symbol;


/* Generated By:JJTree: Do not edit this line. ASTArgument.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTArgument extends SimpleNode {
  public ASTArgument(int id) {
    super(id);
  }

  public ASTArgument(Yal p, int id) {
    super(p, id);
  }

  public Symbol.Type getReturnType() {
	  if(children != null && children.length > 0) {
		  
		  if(children[0].toString().equals("Integer"))
			  return Symbol.Type.SCALAR;
		  else if(children[0].toString().equals("String"))
			  return Symbol.Type.SCALAR;
		  else if(children[0].toString().equals("Id")) {
			  if(! verifySymbolTypes(value, true, Symbol.Type.ARRAY, Symbol.Type.SCALAR))
				  //System.out.println("Semantic Error: Variable "+value+" has to be  initialized in order to be used as an argument in a function call.");
				  printSemanticError("Variable "+value+" has to be  initialized in order to be used as an argument in a function call");
			  return symbolTable.getSymbolType(value);
		  }
		 
	  }
	  return Symbol.Type.UNDEFINED;
			  
  }


/* JavaCC - OriginalChecksum=ca6418c9d254e6a8ef749b7e5c0a2e45 (do not edit this line) */

    
  public int getArgumentType(){
	  SimpleNode typeArgument = (SimpleNode) jjtGetChild(0);
	  return typeArgument.id;
  }

}
/* JavaCC - OriginalChecksum=bcfaffac6c182a1c4c4b38a87de9d6ea (do not edit this line) */

